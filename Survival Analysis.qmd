---
title: "Survival Analysis Tutorial with Practical Application in R using the ggsurvfit Package"
format: html
---

# Introduction:

Survival analysis is a statistical technique used to analyze the time until an event of interest occurs. It is commonly used in medical research, epidemiology, and other fields to study the time to death or failure in a population. In this tutorial, we will explore survival analysis using the ggsurvfit package in R. ggsurvfit is a powerful package that provides an easy-to-use interface for visualizing survival curves and conducting various survival analysis tasks.

## Installing Required Packages:

Before we begin, ensure that the ggsurvfit package and its dependencies are installed on your system. You can install the package using the following command:

```{r}

# install.packages("ggsurvfit")

```

Let's load the necessary libraries into our R environment: Loading the Required Libraries:

```{r}

library(survival)
library(ggplot2)
library(ggsurvfit)

```

## Understanding Survival Analysis:

Survival analysis deals with time-to-event data, where the event can be death, failure, recovery, or any other event of interest. The key concepts in survival analysis include: + Survival Time: The time from the start of the observation to the occurrence of the event. + Survival Function: The probability that an individual survives beyond a certain time point. + Hazard Function: The instantaneous rate at which events occur given that the individual has survived up to a specific time.

## Preparing the Data:

For this tutorial, we will use the "lung" dataset from the survival package, which contains information about survival times of patients with advanced lung cancer.

```{r}

lung1 <- survival::lung
  
str(lung1)

```

## Exploratory Data Analysis (EDA):

Before diving into survival analysis, it is essential to explore and understand the data. Perform exploratory data analysis tasks such as summarizing the dataset, checking for missing values, and identifying any potential covariates.

```{r}

lung1$sex <- ifelse(lung1$sex == 1, "male", "female")

# Summary of the dataset
summary(lung1)

# Checking for missing values
sum(is.na(lung1))

# Exploring covariates
# Example: Boxplot of survival time by treatment
lung1 %>%
  ggplot(aes(as.factor(sex), time)) +
  geom_boxplot(aes(color = sex )) +
  labs(x = "ph.ecog", y = "time") +
  theme_minimal()

```

## Estimating Survival Curves:

To estimate the survival curves, we can use the survfit() function from the survival package. The survfit() function takes a formula specifying the survival time and an optional grouping variable.

```{r}

surv_fit <- survfit(Surv(time, status) ~ 1, data = lung1)

```

# Visualizing Survival Curves:

The ggsurvfit package provides a convenient way to visualize survival curves using ggplot2. We can use the ggsurvplot() function to create survival plots with various customization options.

```{r, fig.height=8}

# survfit2() calculates the survival curves based on the time and status variables, grouped by the sex variable in the lung1 dataset
# ggsurvfit() creates a basic survival plot using ggplot2

survfit2(Surv(time, status) ~ sex, data = lung1) %>%
  ggsurvfit() +  # Adds the survival curves to the plot
  
  add_confidence_interval() +  # Adds confidence intervals to the survival curves
  
  coord_cartesian(xlim = c(0, 900)) +  # Sets the x-axis limits from 0 to 900
  
  scale_y_continuous(
    limits = c(0, 1),  # Sets the y-axis limits from 0 to 1
    labels = scales::percent  # Formats y-axis labels as percentages
  ) +
  
  scale_color_manual(values = c("#2584da", "#da7b25")) +  # Manually sets the colors for line colors
  scale_fill_manual(values = c("#2584da", "#da7b25")) +  # Manually sets the colors for fill colors
  
  theme_minimal() +  # Applies a minimal theme to the plot
  theme(legend.position = "bottom") +  # Sets the position of the legend to the bottom
  
  labs(
    title = "Visualizing Survival Curves",  # Sets the plot title
    y = "Percentage Survival",  # Sets the y-axis label
    x = "Survival time in days"  # Sets the x-axis label
  ) +
  
  add_risktable(risktable_group = 'risktable_stats', size = 3) +  # Adds a risk table to the plot
  
  scale_x_continuous(breaks = seq(from = 0, to = 1000, by = 100)) +  # Sets x-axis breaks at intervals of 100
  
  add_pvalue(caption = "Log-rank {p.value}")  # Adds a p-value for the log-rank test

```

# Cox Proportional Hazards Model:

The Cox proportional hazards model is widely used in survival analysis to examine the relationship between survival time and covariates. We can fit the Cox model using the coxph() function.

```{r}
# Fitting the Cox proportional hazards model
cox_model <- coxph(Surv(time, status) ~ age + sex + ph.ecog, data = lung1)

# Printing the model summary
summary(cox_model)

```

# Conclusion:

Survival analysis is a valuable technique for analyzing time-to-event data. In this tutorial, we explored survival analysis using the ggsurvfit package in R. We covered the estimation of survival curves, visualization of survival plots, and fitting a Cox proportional hazards model. By understanding and applying these techniques, you can gain valuable insights from your survival data. Remember to refer to the documentation and additional resources for more advanced topics, such as handling censored data, stratified survival analysis, and time-varying covariates.
